/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View;

import Model.RoomModel;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import Database.*;
import java.sql.*;

/**
 *
 * @author Dell
 */
public class DashboardPanel extends javax.swing.JPanel {

    /**
     * Creates new form DashboardPanel
     */
    public DashboardPanel() {
        initComponents();
        loadRoomsToDisplay(); 

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        roomContainerPanel = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(884, 564));

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 0, 36)); // NOI18N
        jLabel2.setText("Dashboard");

        roomContainerPanel.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane1.setViewportView(roomContainerPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(425, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel roomContainerPanel;
    // End of variables declaration//GEN-END:variables

private void loadRoomsToDisplay() {

    roomContainerPanel.removeAll();
    
    List<RoomModel> rooms = getAllRoomsFromDatabase();

    for (RoomModel room : rooms) {
        RoomCard roomCard = new RoomCard();
        roomCard.setRoomData(room);
        roomCard.setBorder(BorderFactory.createRaisedBevelBorder());
        roomContainerPanel.add(roomCard);
    }
    
    roomContainerPanel.revalidate();
    roomContainerPanel.repaint();
}

private List<RoomModel> getAllRoomsFromDatabase() {
    
    List<RoomModel> rooms = new ArrayList<>();
    String query = "SELECT room_id, room_type, max_guests, price, image_path FROM rooms";
      
    MySqlConnection connection = new MySqlConnection();
    Connection conn = connection.openConnection();
    
    try (PreparedStatement stmt = conn.prepareStatement(query);
         ResultSet rs = stmt.executeQuery()) {
        
        while (rs.next()) {
            RoomModel room = new RoomModel(
                rs.getInt("room_id"),
                rs.getString("room_type"),
                rs.getInt("price"),
                rs.getInt("max_guests"),
                rs.getString("image_path")
            );
            rooms.add(room);
        }
    } catch (SQLException e) {
        e.printStackTrace();
        System.out.println("Error loading rooms: " + e.getMessage());
    }
    return rooms;
}
}
